// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace entityframeworkrepository
{
    using entityframeworkrepository.core;
    using System.ComponentModel.DataAnnotations;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public partial class FakeWorkBenchContext : IWorkBenchContext
    {
        public System.Data.Entity.DbSet<Activity> Activities { get; set; }
        public System.Data.Entity.DbSet<Company> Companies { get; set; }
        public System.Data.Entity.DbSet<CvBank> CvBanks { get; set; }
        public System.Data.Entity.DbSet<CvBankOwner> CvBankOwners { get; set; }
        public System.Data.Entity.DbSet<Department> Departments { get; set; }
        public System.Data.Entity.DbSet<Dictionary> Dictionaries { get; set; }
        public System.Data.Entity.DbSet<Event> Events { get; set; }
        public System.Data.Entity.DbSet<InterviewKit> InterviewKits { get; set; }
        public System.Data.Entity.DbSet<InterviewKitAnswer> InterviewKitAnswers { get; set; }
        public System.Data.Entity.DbSet<Job> Jobs { get; set; }
        public System.Data.Entity.DbSet<JobBoard> JobBoards { get; set; }
        public System.Data.Entity.DbSet<JobBoardCart> JobBoardCarts { get; set; }
        public System.Data.Entity.DbSet<JobBoardCredential> JobBoardCredentials { get; set; }
        public System.Data.Entity.DbSet<JobForm> JobForms { get; set; }
        public System.Data.Entity.DbSet<JobFormResult> JobFormResults { get; set; }
        public System.Data.Entity.DbSet<JobFormResultDetail> JobFormResultDetails { get; set; }
        public System.Data.Entity.DbSet<JobFormResultQa> JobFormResultQas { get; set; }
        public System.Data.Entity.DbSet<JobFormResultX> JobFormResultXes { get; set; }
        public System.Data.Entity.DbSet<Person> People { get; set; }
        public System.Data.Entity.DbSet<Pipeline> Pipelines { get; set; }
        public System.Data.Entity.DbSet<PricePackage> PricePackages { get; set; }
        public System.Data.Entity.DbSet<Reminder> Reminders { get; set; }
        public System.Data.Entity.DbSet<SharedContent> SharedContents { get; set; }
        public System.Data.Entity.DbSet<Stage> Stages { get; set; }
        public System.Data.Entity.DbSet<Tag> Tags { get; set; }
        public System.Data.Entity.DbSet<Template> Templates { get; set; }
        public System.Data.Entity.DbSet<TokenManager> TokenManagers { get; set; }

        public FakeWorkBenchContext()
        {
            Activities = new FakeDbSet<Activity>("ActivityId");
            Companies = new FakeDbSet<Company>("CompanyId");
            CvBanks = new FakeDbSet<CvBank>("CvBankId");
            CvBankOwners = new FakeDbSet<CvBankOwner>("CvBankOwnerId");
            Departments = new FakeDbSet<Department>("CompanyId", "PersonId");
            Dictionaries = new FakeDbSet<Dictionary>("DictionaryTypeId");
            Events = new FakeDbSet<Event>("EventId");
            InterviewKits = new FakeDbSet<InterviewKit>("InterviewKitId");
            InterviewKitAnswers = new FakeDbSet<InterviewKitAnswer>("InterviewKitAnswerId");
            Jobs = new FakeDbSet<Job>("JobId");
            JobBoards = new FakeDbSet<JobBoard>("JobBoardId");
            JobBoardCarts = new FakeDbSet<JobBoardCart>("JobBoardCartId");
            JobBoardCredentials = new FakeDbSet<JobBoardCredential>("JobBoardCredentialId");
            JobForms = new FakeDbSet<JobForm>("JobFormId");
            JobFormResults = new FakeDbSet<JobFormResult>("JobFormResultId");
            JobFormResultDetails = new FakeDbSet<JobFormResultDetail>("JobFormResultDetailId");
            JobFormResultQas = new FakeDbSet<JobFormResultQa>("JobFormResultQaid");
            JobFormResultXes = new FakeDbSet<JobFormResultX>("JobFormResultId", "JobFormId", "CandidateId", "FirstName", "LastName", "Email", "Headline", "Telephone", "Address", "Photo", "Video", "Summary", "CvBankId", "Referer", "IsCoverLetterIncluded", "UpdatedBy", "CreatedBy", "DateAdded", "DateUpdated");
            People = new FakeDbSet<Person>("PersonId");
            Pipelines = new FakeDbSet<Pipeline>("PipelineId");
            PricePackages = new FakeDbSet<PricePackage>("PricePackageId");
            Reminders = new FakeDbSet<Reminder>("ReminderId");
            SharedContents = new FakeDbSet<SharedContent>("SharedContentId");
            Stages = new FakeDbSet<Stage>("StageId");
            Tags = new FakeDbSet<Tag>("TagId");
            Templates = new FakeDbSet<Template>("TemplateId");
            TokenManagers = new FakeDbSet<TokenManager>("TokenId");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }



        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker
        {
            get { throw new System.NotImplementedException(); }
        }

        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration
        {
            get { throw new System.NotImplementedException(); }
        }

        public System.Data.Entity.Database Database
        {
            get { throw new System.NotImplementedException(); }
        }
    }
}
// </auto-generated>
