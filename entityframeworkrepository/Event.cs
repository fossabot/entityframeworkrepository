// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace entityframeworkrepository
{
    using entityframeworkrepository.core;
    using System.ComponentModel.DataAnnotations;

    // Event
    [Table("Event", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public partial class Event: BaseEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"EventID", Order = 1, TypeName = "int")]
        [Index(@"PK_Event", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Event ID")]
        public int EventId { get; set; } // EventID (Primary key)

        [Column(@"JobFormResultID", Order = 2, TypeName = "int")]
        [Display(Name = "Job form result ID")]
        public int? JobFormResultId { get; set; } // JobFormResultID

        [Column(@"EventNote", Order = 3, TypeName = "varchar")]
        [MaxLength(200)]
        [StringLength(200)]
        [Display(Name = "Event note")]
        public string EventNote { get; set; } // EventNote (length: 200)

        [Column(@"EventTypeID", Order = 4, TypeName = "int")]
        [Display(Name = "Event type ID")]
        public int? EventTypeId { get; set; } // EventTypeID

        [Column(@"EventStartDate", Order = 5, TypeName = "datetime")]
        [Display(Name = "Event start date")]
        public System.DateTime? EventStartDate { get; set; } // EventStartDate

        [Column(@"EventEndDate", Order = 6, TypeName = "datetime")]
        [Display(Name = "Event end date")]
        public System.DateTime? EventEndDate { get; set; } // EventEndDate

        [Column(@"EventAttendee", Order = 7, TypeName = "int")]
        [Display(Name = "Event attendee")]
        public int? EventAttendee { get; set; } // EventAttendee

        [Column(@"UpdatedBy", Order = 8, TypeName = "int")]
        [Display(Name = "Updated by")]
        public int? UpdatedBy { get; set; } // UpdatedBy

        [Column(@"CreatedBy", Order = 9, TypeName = "int")]
        [Display(Name = "Created by")]
        public int? CreatedBy { get; set; } // CreatedBy

        [Column(@"DateAdded", Order = 10, TypeName = "datetime")]
        [Display(Name = "Date added")]
        public System.DateTime? DateAdded { get; set; } // DateAdded

        [Column(@"DateUpdated", Order = 11, TypeName = "datetime")]
        [Display(Name = "Date updated")]
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        public Event()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
